
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module MiniProject(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);


//=======================================================
//  REG/WIRE declarations
//=======================================================
wire [1:0] DQM;
assign DRAM_LDQM = DQM[0];
assign DRAM_UDQM = DQM[1];

//=======================================================
//  Structural coding
//=======================================================
	nios (
		.clk_clk(CLOCK_50),       //       clk.clk
		.reset_reset(1'b0),   //     reset.reset
		.sdram_wire_addr(DRAM_ADDR),    //     sdram_wire.addr
		.sdram_wire_ba(DRAM_BA),      //          .ba
		.sdram_wire_cas_n(DRAM_CAS_N),   //          .cas_n
		.sdram_wire_cke(DRAM_CKE),     //          .cke
		.sdram_wire_cs_n(DRAM_CS_N),    //          .cs_n
		.sdram_wire_dq(DRAM_DQ),      //          .dq
		.sdram_wire_dqm(DQM),     //          .dqm
		.sdram_wire_ras_n(DRAM_RAS_N),   //          .ras_n
		.sdram_wire_we_n(DRAM_WE_N),    //          .we_n
		.sdram_clk_clk(DRAM_CLK),  // sdram_wire_clk.clk
		.led_wire_export   (LEDR),   //      ledr.export
		.switch_wire_export   (SW),   //      switch.export
		.lcd_wire_export({GPIO[5],GPIO[7],GPIO[9],GPIO[11],GPIO[13],GPIO[15],GPIO[17],GPIO[19],GPIO[21],GPIO[23],GPIO[25]}),
	   .stepper_wire_export({GPIO[27],GPIO[29],GPIO[31],GPIO[33]}),
		.key_wire_export(KEY),
		.buzzer_wire_export(GPIO[35]),
	);


endmodule
